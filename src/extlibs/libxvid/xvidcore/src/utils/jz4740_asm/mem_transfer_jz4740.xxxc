/*****************************************************************************
 *
 *  XVID MPEG-4 VIDEO CODEC
 *  - 8bit<->16bit transfer  -
 *
 *  Copyright(C) 2001-2003 Peter Ross <pross@xvid.org>
 *
 *  This program is free software ; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation ; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program ; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * $Id: mem_transfer.c 1985 2011-05-18 09:02:35Z Isibaar $
 *
 ****************************************************************************/
#define ARCH_IS_32BIT
#define ARCH_IS_GENERIC

#include "../../global.h"
#include "jz4740_mxu.h"

/*
 * SRC - the source buffer
 * DST - the destination buffer
 *
 * Then the function does the 8->16 bit transfer and this serie of operations :
 *
 *    SRC (8bit)  = SRC
 *    DST (16bit) = SRC
 */
void
transfer_8to16copy_mxu(int16_t * const dst,
                                         const uint8_t * const src,
                                         uint32_t stride)
{
	int i;
	int32_t *dst_data;
	int32_t *src_data;

	dst_data=(int32_t *) dst - stride;
	src_data=(int32_t *) src;

	for (i = 0; i < 8; i++) {
		S32LDI(xr1,src_data,4);
		S32LDI(xr2,src_data,4);
		S32SFL(xr4,xr0,xr1,xr3,ptn0);
		S32SFL(xr6,xr0,xr2,xr5,ptn0);
		S32SDIV(xr3,dst_data,stride,0);
		S32SDI(xr4,dst_data,4);
		S32SDI(xr5,dst_data,4);
		S32SDI(xr6,dst_data,4);
        }
}


/*
 * SRC - the source buffer
 * DST - the destination buffer
 *
 * Then the function does the 16->8 bit transfer and this serie of operations :
 *
 *    SRC (16bit) = SRC
 *    DST (8bit)  = max(min(DST+SRC, 255), 0)
 */
void transfer_16to8add_mxu(uint8_t * dst,
			const int16_t * const src,
			uint32_t stride)
{
	int32_t *src_data;
	int32_t i;
	src_data = (int32_t *)src - 1;
	dst -= stride;

	for (i = 0; i < 8; i++) {
		S32LDIV(xr5, dst, stride, 0);
		S32LDD(xr6, dst, 4);
		S32LDI(xr1, src_data, 4);
		S32LDI(xr2, src_data, 4);
		S32LDI(xr3, src_data, 4);
		S32LDI(xr4, src_data, 4);
		Q8ACCE_AA(xr2, xr5, xr0, xr1);
		Q8ACCE_AA(xr4, xr6, xr0, xr3);
		Q16SAT(xr5, xr2, xr1);
		Q16SAT(xr6, xr4, xr3);
		S32STD(xr5, dst, 0);
		S32STD(xr6, dst, 4);
	}
}
